/* Styles */

/* Components */
import ReviewForm from "@/src/components/ReviewForm";
import ThanksForm from "@/src/components/ThanksForm";
import UserForm from "@/src/components/UserForm";
import Head from "next/head";
import { GrFormPrevious, GrFormNext } from "react-icons/gr";
import { FiSend } from "react-icons/fi";
import Steps from "@/src/components/Steps";

/* Hooks */
import useForm from "@/src/hooks/useForm";
import { FormEvent, useState } from "react";
import { useCreateFormUserMutationMutation } from "@/src/graphql/generated";

type FormFields = {
  name: string;
  birth: string;
  city: string;
  quest1: string;
  quest2: string;
  quest3: string;
  quest4: string;
};
const formTemplate: FormFields = {
  name: "",
  birth: "",
  city: "",
  quest1: "",
  quest2: "",
  quest3: "",
  quest4: "",
};

export default function Home() {
  const [createFormUser, { loading }] = useCreateFormUserMutationMutation();

  const [data, setData] = useState(formTemplate);
  function updateFieldHandler(key: string, value: string) {
    setData((prev) => {
      return { ...prev, [key]: value };
    });
  }

  const formComponents = [
    <UserForm data={data} updateFieldHandler={updateFieldHandler} />,
    <ReviewForm data={data} updateFieldHandler={updateFieldHandler} />,
    <ThanksForm data={data} />,
  ];
  const { currentStep, currentComponent, changeStep, isLastStep, isFirstStep } =
    useForm(formComponents);

  async function handlerFormUser(e: FormEvent) {
    e.preventDefault();
    if (isLastStep) {
      await createFormUser({
        variables: {
          name: data.name,
          birth: data.birth,
          city: data.city,
          quest1: data.quest1,
          quest2: data.quest2,
          quest3: data.quest3,
          quest4: data.quest4,
        },
      });
    }
    changeStep(currentStep + 1, e);
  }
  return (
    <>
      <Head>
        <title>Formulário Ux</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/" />
      </Head>
      <main>
        <div className="text-center pt-10 text-slate-100">
          <div>
            <h2 className="font-semibold text-2xl pb-2">Pesquisa UX</h2>
            <p className=" p-3">
              Com sua colaboração, vamos desenvolver o projeto Onebit-Social.
              Por favor, preencha o formulário abaixo e nos envie sua opinião.
            </p>
          </div>
          <div className="flex flex-col gap-5 items-center pt-20  ">
            <Steps currentStep={currentStep} />

            <form onSubmit={handlerFormUser}>
              <div>{currentComponent}</div>
              <div className="flex pt-10 gap-2  justify-center mb-4">
                {!isFirstStep && (
                  <button
                    type="button"
                    onClick={() => changeStep(currentStep - 1)}
                    className="btn flex items-center gap-2"
                  >
                    <GrFormPrevious />
                    <span>Voltar</span>
                  </button>
                )}
                {!isLastStep ? (
                  <button className="btn flex items-center gap-2" type="submit">
                    <span>Avançar</span>
                    <GrFormNext />
                  </button>
                ) : (
                  <button
                    type="button"
                    className="btn flex items-center gap-2"
                    onClick={handlerFormUser}
                    disabled={loading}
                  >
                    <span>Enviar</span>
                    <FiSend color="black" />
                  </button>
                )}
              </div>
            </form>
          </div>
        </div>
      </main>
    </>
  );
}
